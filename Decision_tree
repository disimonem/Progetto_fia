
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import accuracy_score
import feature_selection 
from sklearn import tree
dataset = pd.read_parquet('challenge_campus_biomedico_2024.parquet')

df= feature_selection.dataset_preprocessing(dataset)
print(df.head())
X = df.drop(['label', 'incremento_percentuale'], axis = 1)
y = df['incremento_percentuale']

dtree = tree.DecisionTreeRegressor()
dtree.fit(X, y)
plt.figure(figsize=(30, 10))
_ = tree.plot_tree(dtree, filled=True, max_depth=3)
'''
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 8, test_size = 0.3)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
clf = DecisionTreeClassifier(max_depth=16, random_state=8)
clf.fit(X_train_scaled, y_train)
y_pred = clf.predict(X_test_scaled)
#Get feature importances
importances = clf.feature_importances_
 
# Select features with importance greater than a threshold
threshold = 0.1  # Adjust as needed
selected_features = X.columns[importances > threshold]
 
# Use only the selected features
X_train_selected = X_train[selected_features]
X_test_selected = X_test[selected_features]

#Train a new model using the selected features
clf_selected = DecisionTreeClassifier(max_depth=16, random_state=8)
clf_selected.fit(X_train_selected, y_train)

# Make predictions on the test set using the model trained with all features
y_pred_all_features = clf.predict(X_test_scaled)

# Calculate the accuracy of the model with all features
accuracy_all_features = accuracy_score(y_test, y_pred_all_features)
print(f"Accuracy with all features: {accuracy_all_features}")

# Make predictions on the test set using the model trained with selected features
y_pred_selected_features = clf_selected.predict(X_test_selected)

# Calculate the accuracy of the model with selected features
accuracy_selected_features = accuracy_score(y_test, y_pred_selected_features)
print(f"Accuracy with selected features: {accuracy_selected_features}")

plt.figure(figsize=(20, 10))  # Definisce la dimensione della figura
plot_tree(clf, filled=True, rounded=True, class_names=True, feature_names=X.columns)
plt.title("Decision Tree")
plt.show()
'''